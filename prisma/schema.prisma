// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Studio {
  id          Int    @id @default(autoincrement())
  image       String 
  name        String
  address     String
  price       Float
  paket       String
  description String
  ownerId Int
  user User @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi: One-to-Many
  pemesanan Pemesanan[]
}

model User {
  id          Int     @id @default(autoincrement())
  name        String
  email       String  @unique
  password    String
  image       String?
  role        Role    @default(USER)
  instagram   String?
  accessToken String?
  verify      Boolean @default(false)
  verifyToken String?

  // Relasi: One-to-Many
  pemesanan Pemesanan[]
  studio Studio[]
  review Review[]
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Pembayaran {
  id          Int      @id @default(autoincrement())
  jumlah      Float
  metode      String
  status      String
  waktuBayar  DateTime @default(now())
  redirectUrl String?
  code        String   @unique

  // Relasi: Many-to-One
  pemesanan Pemesanan @relation(fields: [pemesananId], references: [id])

  // Field foreign key ke Pemesanan
  pemesananId Int
  @@map("pembayaran")
}

model Pemesanan {
  id             Int      @id @default(autoincrement())
  totalHarga     Float
  waktuPesan     DateTime @default(now())
  tanggalMulai   DateTime
  tanggalSelesai DateTime
  durasi         Int
  studioId       Int
  userId         Int

  // Relasi: Many-to-One
  studio Studio @relation(fields: [studioId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  reviw Review[]

  // Relasi: One-to-Many ke Pembayaran
  pembayaran Pembayaran[]
  @@map("pemesanan")
}

model Review {
  id Int @id @default(autoincrement())
  comment String
  rating Int
  image String
  userId Int
  orderId Int
  user User @relation(fields: [userId], references: [id])
  order Pemesanan @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Withdraw {
  id Int @id @default(autoincrement())
  accountName String
  accountNumber String
  bank String
  amount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}